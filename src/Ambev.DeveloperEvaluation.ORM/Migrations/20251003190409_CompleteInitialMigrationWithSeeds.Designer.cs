// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20251003190409_CompleteInitialMigrationWithSeeds")]
    partial class CompleteInitialMigrationWithSeeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name");

                    b.ToTable("Branches", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "Av. Paulista, 1234 - Bela Vista, São Paulo - SP, 01310-100",
                            CreatedAt = new DateTime(2024, 4, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "saopaulo.downtown@ambev.com",
                            IsActive = true,
                            Manager = "Carlos Silva",
                            Name = "São Paulo Downtown",
                            Phone = "+55 11 3456-7890",
                            UpdatedAt = new DateTime(2024, 4, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "Av. Nossa Senhora de Copacabana, 987 - Copacabana, Rio de Janeiro - RJ, 22070-012",
                            CreatedAt = new DateTime(2024, 5, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "rio.copacabana@ambev.com",
                            IsActive = true,
                            Manager = "Ana Costa",
                            Name = "Rio de Janeiro Copacabana",
                            Phone = "+55 21 2987-6543",
                            UpdatedAt = new DateTime(2024, 5, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "Rua da Bahia, 456 - Savassi, Belo Horizonte - MG, 30160-012",
                            CreatedAt = new DateTime(2024, 6, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bh.savassi@ambev.com",
                            IsActive = true,
                            Manager = "Roberto Santos",
                            Name = "Belo Horizonte Savassi",
                            Phone = "+55 31 3321-9876",
                            UpdatedAt = new DateTime(2024, 6, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Address = "Rua Padre Chagas, 789 - Moinhos de Vento, Porto Alegre - RS, 90570-080",
                            CreatedAt = new DateTime(2024, 7, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "poa.moinhos@ambev.com",
                            IsActive = true,
                            Manager = "Fernanda Lima",
                            Name = "Porto Alegre Moinhos",
                            Phone = "+55 51 3234-5678",
                            UpdatedAt = new DateTime(2024, 7, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Address = "SCS Quadra 02, Bloco A, Loja 15 - Asa Sul, Brasília - DF, 70318-900",
                            CreatedAt = new DateTime(2024, 8, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "brasilia.asasul@ambev.com",
                            IsActive = true,
                            Manager = "João Oliveira",
                            Name = "Brasília Asa Sul",
                            Phone = "+55 61 3445-6789",
                            UpdatedAt = new DateTime(2024, 8, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1111111-1111-1111-1111-111111111111"),
                            Address = "Rua das Flores, 123 - Vila Madalena, São Paulo - SP",
                            BirthDate = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 2, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "maria.silva@email.com",
                            IsActive = true,
                            Name = "Maria Silva",
                            Phone = "+55 11 99876-5432",
                            UpdatedAt = new DateTime(2024, 2, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d2222222-2222-2222-2222-222222222222"),
                            Address = "Av. Atlântica, 456 - Copacabana, Rio de Janeiro - RJ",
                            BirthDate = new DateTime(1990, 7, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 3, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "joao.santos@email.com",
                            IsActive = true,
                            Name = "João Santos",
                            Phone = "+55 21 98765-4321",
                            UpdatedAt = new DateTime(2024, 3, 3, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d3333333-3333-3333-3333-333333333333"),
                            Address = "Rua Pampulha, 789 - Savassi, Belo Horizonte - MG",
                            BirthDate = new DateTime(1988, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ana.costa@email.com",
                            IsActive = true,
                            Name = "Ana Paula Costa",
                            Phone = "+55 31 97654-3210",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d4444444-4444-4444-4444-444444444444"),
                            Address = "Rua dos Andradas, 321 - Centro Histórico, Porto Alegre - RS",
                            BirthDate = new DateTime(1992, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "pedro.oliveira@email.com",
                            IsActive = true,
                            Name = "Pedro Oliveira",
                            Phone = "+55 51 96543-2109",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d5555555-5555-5555-5555-555555555555"),
                            Address = "SHIS QI 15, Conjunto 12, Casa 5 - Lago Sul, Brasília - DF",
                            BirthDate = new DateTime(1987, 9, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "carla.mendes@email.com",
                            IsActive = true,
                            Name = "Carla Mendes",
                            Phone = "+55 61 95432-1098",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d6666666-6666-6666-6666-666666666666"),
                            Address = "Alameda Santos, 654 - Jardins, São Paulo - SP",
                            BirthDate = new DateTime(1995, 12, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "lucas.ferreira@email.com",
                            IsActive = true,
                            Name = "Lucas Ferreira",
                            Phone = "+55 11 94321-0987",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d7777777-7777-7777-7777-777777777777"),
                            Address = "Rua Visconde de Pirajá, 987 - Ipanema, Rio de Janeiro - RJ",
                            BirthDate = new DateTime(1993, 4, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "juliana.barbosa@email.com",
                            IsActive = true,
                            Name = "Juliana Barbosa",
                            Phone = "+55 21 93210-9876",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d8888888-8888-8888-8888-888888888888"),
                            Address = "Av. Afonso Pena, 234 - Centro, Belo Horizonte - MG",
                            BirthDate = new DateTime(1989, 8, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ricardo.almeida@email.com",
                            IsActive = true,
                            Name = "Ricardo Almeida",
                            Phone = "+55 31 92109-8765",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1111111-1111-1111-1111-111111111111"),
                            Category = "Cervejas",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cerveja Brahma Pilsen em lata de 350ml",
                            Image = "brahma_lata_350ml.jpg",
                            IsActive = true,
                            MinStockLevel = 50,
                            Name = "Brahma Lata 350ml",
                            Price = 3.50m,
                            StockQuantity = 500,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b2222222-2222-2222-2222-222222222222"),
                            Category = "Cervejas",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cerveja Skol Pilsen em lata de 269ml",
                            Image = "skol_lata_269ml.jpg",
                            IsActive = true,
                            MinStockLevel = 75,
                            Name = "Skol Lata 269ml",
                            Price = 2.80m,
                            StockQuantity = 750,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b3333333-3333-3333-3333-333333333333"),
                            Category = "Cervejas",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cerveja Antarctica Original em lata de 350ml",
                            Image = "antarctica_lata_350ml.jpg",
                            IsActive = true,
                            MinStockLevel = 30,
                            Name = "Antarctica Original Lata 350ml",
                            Price = 3.80m,
                            StockQuantity = 300,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b4444444-4444-4444-4444-444444444444"),
                            Category = "Cervejas Premium",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cerveja Stella Artois Premium em garrafa de 550ml",
                            Image = "stella_garrafa_550ml.jpg",
                            IsActive = true,
                            MinStockLevel = 20,
                            Name = "Stella Artois Garrafa 550ml",
                            Price = 8.90m,
                            StockQuantity = 200,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b5555555-5555-5555-5555-555555555555"),
                            Category = "Cervejas Importadas",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cerveja Corona Extra mexicana em garrafa de 355ml",
                            Image = "corona_garrafa_355ml.jpg",
                            IsActive = true,
                            MinStockLevel = 15,
                            Name = "Corona Extra Garrafa 355ml",
                            Price = 12.50m,
                            StockQuantity = 150,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b6666666-6666-6666-6666-666666666666"),
                            Category = "Refrigerantes",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Refrigerante Guaraná Antarctica em lata de 350ml",
                            Image = "guarana_lata_350ml.jpg",
                            IsActive = true,
                            MinStockLevel = 40,
                            Name = "Guaraná Antarctica Lata 350ml",
                            Price = 4.20m,
                            StockQuantity = 400,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b7777777-7777-7777-7777-777777777777"),
                            Category = "Refrigerantes",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Refrigerante Pepsi Twist com limão em lata de 350ml",
                            Image = "pepsi_twist_lata_350ml.jpg",
                            IsActive = true,
                            MinStockLevel = 35,
                            Name = "Pepsi Twist Lata 350ml",
                            Price = 3.90m,
                            StockQuantity = 350,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b8888888-8888-8888-8888-888888888888"),
                            Category = "Isotônicos",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bebida isotônica H2OH! sabor limão em garrafa Pet de 500ml",
                            Image = "h2oh_limao_pet_500ml.jpg",
                            IsActive = true,
                            MinStockLevel = 25,
                            Name = "H2OH! Limão Pet 500ml",
                            Price = 5.50m,
                            StockQuantity = 250,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b9999999-9999-9999-9999-999999999999"),
                            Category = "Energéticos",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Energético Fusion original em garrafa Pet de 500ml",
                            Image = "fusion_pet_500ml.jpg",
                            IsActive = true,
                            MinStockLevel = 18,
                            Name = "Fusion Pet 500ml",
                            Price = 7.80m,
                            StockQuantity = 180,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000000"),
                            Category = "Águas",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Água mineral Crystal em garrafa Pet de 500ml",
                            Image = "agua_crystal_pet_500ml.jpg",
                            IsActive = true,
                            MinStockLevel = 60,
                            Name = "Água Crystal Pet 500ml",
                            Price = 2.20m,
                            StockQuantity = 600,
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("fa000000-0000-0000-0000-000000000000"),
                            Category = "Cervejas Premium",
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Cerveja Bohemia Pilsen premium em garrafa de 600ml",
                            Image = "bohemia_garrafa_600ml.jpg",
                            IsActive = false,
                            MinStockLevel = 12,
                            Name = "Bohemia Pilsen Garrafa 600ml",
                            Price = 9.50m,
                            StockQuantity = 120,
                            UpdatedAt = new DateTime(2025, 9, 3, 19, 4, 8, 940, DateTimeKind.Utc).AddTicks(2781)
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleDate");

                    b.HasIndex("SaleNumber")
                        .IsUnique();

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1111111-1111-1111-1111-111111111111"),
                            BranchId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(926),
                            CustomerId = new Guid("d1111111-1111-1111-1111-111111111111"),
                            SaleDate = new DateTime(2025, 9, 3, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(921),
                            SaleNumber = "SAL-2024-001",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 3, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(926)
                        },
                        new
                        {
                            Id = new Guid("e2222222-2222-2222-2222-222222222222"),
                            BranchId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 5, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(939),
                            CustomerId = new Guid("d2222222-2222-2222-2222-222222222222"),
                            SaleDate = new DateTime(2025, 9, 5, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(936),
                            SaleNumber = "SAL-2024-002",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 5, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(939)
                        },
                        new
                        {
                            Id = new Guid("e3333333-3333-3333-3333-333333333333"),
                            BranchId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 8, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(949),
                            CustomerId = new Guid("d3333333-3333-3333-3333-333333333333"),
                            SaleDate = new DateTime(2025, 9, 8, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(946),
                            SaleNumber = "SAL-2024-003",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 8, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(949)
                        },
                        new
                        {
                            Id = new Guid("e4444444-4444-4444-4444-444444444444"),
                            BranchId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 11, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1016),
                            CustomerId = new Guid("d4444444-4444-4444-4444-444444444444"),
                            SaleDate = new DateTime(2025, 9, 11, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1013),
                            SaleNumber = "SAL-2024-004",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 11, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1017)
                        },
                        new
                        {
                            Id = new Guid("e5555555-5555-5555-5555-555555555555"),
                            BranchId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1025),
                            CustomerId = new Guid("d5555555-5555-5555-5555-555555555555"),
                            SaleDate = new DateTime(2025, 9, 13, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1023),
                            SaleNumber = "SAL-2024-005",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 13, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1026)
                        },
                        new
                        {
                            Id = new Guid("e6666666-6666-6666-6666-666666666666"),
                            BranchId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 15, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1035),
                            CustomerId = new Guid("d6666666-6666-6666-6666-666666666666"),
                            SaleDate = new DateTime(2025, 9, 15, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1033),
                            SaleNumber = "SAL-2024-006",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 15, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1036)
                        },
                        new
                        {
                            Id = new Guid("e7777777-7777-7777-7777-777777777777"),
                            BranchId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 18, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1044),
                            CustomerId = new Guid("d7777777-7777-7777-7777-777777777777"),
                            SaleDate = new DateTime(2025, 9, 18, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1042),
                            SaleNumber = "SAL-2024-007",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 18, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1044)
                        },
                        new
                        {
                            Id = new Guid("e8888888-8888-8888-8888-888888888888"),
                            BranchId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 21, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1052),
                            CustomerId = new Guid("d8888888-8888-8888-8888-888888888888"),
                            SaleDate = new DateTime(2025, 9, 21, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1050),
                            SaleNumber = "SAL-2024-008",
                            Status = "Confirmed",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 21, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1054)
                        },
                        new
                        {
                            Id = new Guid("e9999999-9999-9999-9999-999999999999"),
                            BranchId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 23, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1062),
                            CustomerId = new Guid("d1111111-1111-1111-1111-111111111111"),
                            SaleDate = new DateTime(2025, 9, 23, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1060),
                            SaleNumber = "SAL-2024-009",
                            Status = "Draft",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 23, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1062)
                        },
                        new
                        {
                            Id = new Guid("e0000000-0000-0000-0000-000000000000"),
                            BranchId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 25, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1075),
                            CustomerId = new Guid("d2222222-2222-2222-2222-222222222222"),
                            SaleDate = new DateTime(2025, 9, 25, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1073),
                            SaleNumber = "SAL-2024-010",
                            Status = "Cancelled",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(2025, 9, 26, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(1077)
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6618),
                            DiscountPercent = 10m,
                            IsCancelled = false,
                            ProductId = new Guid("b1111111-1111-1111-1111-111111111111"),
                            Quantity = 6,
                            SaleId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            TotalPrice = 18.90m,
                            UnitPrice = 3.50m
                        },
                        new
                        {
                            Id = new Guid("f2222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6627),
                            DiscountPercent = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("b6666666-6666-6666-6666-666666666666"),
                            Quantity = 2,
                            SaleId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            TotalPrice = 8.40m,
                            UnitPrice = 4.20m
                        },
                        new
                        {
                            Id = new Guid("f3333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 5, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6630),
                            DiscountPercent = 20m,
                            IsCancelled = false,
                            ProductId = new Guid("b2222222-2222-2222-2222-222222222222"),
                            Quantity = 12,
                            SaleId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            TotalPrice = 26.88m,
                            UnitPrice = 2.80m
                        },
                        new
                        {
                            Id = new Guid("f4444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 9, 8, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6634),
                            DiscountPercent = 10m,
                            IsCancelled = false,
                            ProductId = new Guid("b4444444-4444-4444-4444-444444444444"),
                            Quantity = 4,
                            SaleId = new Guid("e3333333-3333-3333-3333-333333333333"),
                            TotalPrice = 32.04m,
                            UnitPrice = 8.90m
                        },
                        new
                        {
                            Id = new Guid("f5555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 9, 8, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6637),
                            DiscountPercent = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("b8888888-8888-8888-8888-888888888888"),
                            Quantity = 3,
                            SaleId = new Guid("e3333333-3333-3333-3333-333333333333"),
                            TotalPrice = 16.50m,
                            UnitPrice = 5.50m
                        },
                        new
                        {
                            Id = new Guid("f6666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 9, 11, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6639),
                            DiscountPercent = 20m,
                            IsCancelled = false,
                            ProductId = new Guid("b5555555-5555-5555-5555-555555555555"),
                            Quantity = 20,
                            SaleId = new Guid("e4444444-4444-4444-4444-444444444444"),
                            TotalPrice = 200.00m,
                            UnitPrice = 12.50m
                        },
                        new
                        {
                            Id = new Guid("f7777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6642),
                            DiscountPercent = 20m,
                            IsCancelled = false,
                            ProductId = new Guid("b0000000-0000-0000-0000-000000000000"),
                            Quantity = 10,
                            SaleId = new Guid("e5555555-5555-5555-5555-555555555555"),
                            TotalPrice = 17.60m,
                            UnitPrice = 2.20m
                        },
                        new
                        {
                            Id = new Guid("f8888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 9, 13, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6644),
                            DiscountPercent = 10m,
                            IsCancelled = false,
                            ProductId = new Guid("b9999999-9999-9999-9999-999999999999"),
                            Quantity = 5,
                            SaleId = new Guid("e5555555-5555-5555-5555-555555555555"),
                            TotalPrice = 35.10m,
                            UnitPrice = 7.80m
                        },
                        new
                        {
                            Id = new Guid("f9999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 9, 15, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6646),
                            DiscountPercent = 10m,
                            IsCancelled = false,
                            ProductId = new Guid("b3333333-3333-3333-3333-333333333333"),
                            Quantity = 8,
                            SaleId = new Guid("e6666666-6666-6666-6666-666666666666"),
                            TotalPrice = 27.36m,
                            UnitPrice = 3.80m
                        },
                        new
                        {
                            Id = new Guid("f0000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 9, 18, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6648),
                            DiscountPercent = 20m,
                            IsCancelled = false,
                            ProductId = new Guid("b7777777-7777-7777-7777-777777777777"),
                            Quantity = 15,
                            SaleId = new Guid("e7777777-7777-7777-7777-777777777777"),
                            TotalPrice = 46.80m,
                            UnitPrice = 3.90m
                        },
                        new
                        {
                            Id = new Guid("fa000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 9, 21, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6650),
                            DiscountPercent = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("b1111111-1111-1111-1111-111111111111"),
                            Quantity = 1,
                            SaleId = new Guid("e8888888-8888-8888-8888-888888888888"),
                            TotalPrice = 3.50m,
                            UnitPrice = 3.50m
                        },
                        new
                        {
                            Id = new Guid("fb000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 9, 21, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(6652),
                            DiscountPercent = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("b2222222-2222-2222-2222-222222222222"),
                            Quantity = 1,
                            SaleId = new Guid("e8888888-8888-8888-8888-888888888888"),
                            TotalPrice = 2.80m,
                            UnitPrice = 2.80m
                        },
                        new
                        {
                            Id = new Guid("fc000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 9, 23, 19, 4, 8, 941, DateTimeKind.Utc).AddTicks(7327),
                            DiscountPercent = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("b6666666-6666-6666-6666-666666666666"),
                            Quantity = 3,
                            SaleId = new Guid("e9999999-9999-9999-9999-999999999999"),
                            TotalPrice = 12.60m,
                            UnitPrice = 4.20m
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@ambev.com",
                            Password = "admin123",
                            Phone = "+55 11 99999-9999",
                            Role = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("a2222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "carlos.silva@ambev.com",
                            Password = "manager123",
                            Phone = "+55 11 98888-8888",
                            Role = "Manager",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager.carlos"
                        },
                        new
                        {
                            Id = new Guid("a3333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ana.costa@ambev.com",
                            Password = "manager123",
                            Phone = "+55 21 97777-7777",
                            Role = "Manager",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager.ana"
                        },
                        new
                        {
                            Id = new Guid("a4444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "roberto.santos@ambev.com",
                            Password = "manager123",
                            Phone = "+55 31 96666-6666",
                            Role = "Manager",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager.roberto"
                        },
                        new
                        {
                            Id = new Guid("a5555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "fernanda.lima@ambev.com",
                            Password = "manager123",
                            Phone = "+55 51 95555-5555",
                            Role = "Manager",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager.fernanda"
                        },
                        new
                        {
                            Id = new Guid("a6666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "joao.oliveira@ambev.com",
                            Password = "manager123",
                            Phone = "+55 61 94444-4444",
                            Role = "Manager",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "manager.joao"
                        },
                        new
                        {
                            Id = new Guid("a7777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "maria.silva@email.com",
                            Password = "customer123",
                            Phone = "+55 11 99876-5432",
                            Role = "Customer",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "customer.maria"
                        },
                        new
                        {
                            Id = new Guid("a8888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "joao.santos@email.com",
                            Password = "customer123",
                            Phone = "+55 21 98765-4321",
                            Role = "Customer",
                            Status = "Active",
                            UpdatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Username = "customer.joao"
                        },
                        new
                        {
                            Id = new Guid("a9999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ana.costa@email.com",
                            Password = "customer123",
                            Phone = "+55 31 97654-3210",
                            Role = "Customer",
                            Status = "Inactive",
                            UpdatedAt = new DateTime(2025, 9, 23, 19, 4, 8, 942, DateTimeKind.Utc).AddTicks(30),
                            Username = "customer.ana"
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "pedro.oliveira@email.com",
                            Password = "customer123",
                            Phone = "+55 51 96543-2109",
                            Role = "Customer",
                            Status = "Suspended",
                            UpdatedAt = new DateTime(2025, 9, 28, 19, 4, 8, 942, DateTimeKind.Utc).AddTicks(34),
                            Username = "customer.pedro"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", null)
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
